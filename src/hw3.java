import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import oracle.jdbc.OracleDriver;
import org.jdatepicker.JDatePicker;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;

public class hw3 {
    private JPanel MainPanel;
    private JPanel topPanel;
    private JPanel bottomPanel;
    private JScrollPane genreScrollPanel;
    private JScrollPane CountryScrollPanel;
    private JPanel castPanel;
    private JPanel Tagpanel;
    private JPanel MovieResultPanel;
    private JLabel movieAttributes;
    private JLabel movieResultLable;
    private JLabel searchbetweenLabel;
    private JLabel movieYearLabel;
    private JLabel directorLabel;
    private JTextField directorTextField;
    private JButton directorSearchButton;
    private JLabel genreLabel;
    private JLabel countryLabel;
    private JLabel castLabel;
    private JLabel tagidLabel;
    private JTextField tagValueTextField;
    private JComboBox tagWeightComboBox;
    private JComboBox selectAndOrComboBox;
    private JPanel userResultPanel;
    private JPanel QueryResultPanel;
    private JPanel buttonPanel;
    private JTextArea queryResult;
    private JButton executeMovieQueryButton;
    private JButton clearWindowsButton;
    private JButton executeUserQueryButton;
    private JScrollPane movieResultScrollPane;
    private JScrollPane userResultScrollPane;
    private JScrollPane tagScrollPanel;
    private JPanel genrePanel;
    private JPanel countryPanel;
    private JLabel movieyearFromLabel;
    private JLabel movieYearToLabel;
    private JDatePicker fromDatePicker;
    private JDatePicker toDatePicker;
    private JComboBox castSearchCB1;
    private JComboBox castSearchCB4;
    private JComboBox castSearchCB2;
    private JComboBox castSearchCB3;
    private JButton castSearchButton1;
    private JButton castSearchButton4;
    private JButton castSearchButton2;
    private JButton castSearchButton3;
    private JComboBox directorSearchCB;


    //global variables

    private ArrayList<JCheckBox> selectedGenres;
    private ArrayList<JCheckBox> selectedCountries;
    private ArrayList<JCheckBox> selectedFilmCountries;
    private ArrayList<JCheckBox> selectedTags;
    private String searchCondition;
    private String queryCondition;
    private Connection conn;
    private DefaultTableModel tModel;
    //    private String criticRating;
//    private String criticValue;
//    private String numOfReview;
//    private String reviewValue;
    private Integer selectedMovieFrom = 1600;
    private Integer selectedMovieTo = 2999;
    private String actualStartYear = "";
    private String actualEndYear = "";

    public enum AttrType {
        Genres,
        Countries
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.setBackground(new Color(-16777216));
        MainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        topPanel = new JPanel();
        topPanel.setLayout(new GridLayoutManager(10, 14, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.setBackground(new Color(-16777216));
        topPanel.setEnabled(true);
        Font topPanelFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, topPanel.getFont());
        if (topPanelFont != null) topPanel.setFont(topPanelFont);
        MainPanel.add(topPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(24, 271), null, 0, false));
        genreScrollPanel = new JScrollPane();
        genreScrollPanel.setBackground(new Color(-14275789));
        genreScrollPanel.setForeground(new Color(-14275789));
        topPanel.add(genreScrollPanel, new GridConstraints(2, 0, 4, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        genrePanel = new JPanel();
        genrePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        genrePanel.setEnabled(true);
        genrePanel.setForeground(new Color(-14275789));
        genreScrollPanel.setViewportView(genrePanel);
        CountryScrollPanel = new JScrollPane();
        CountryScrollPanel.setHorizontalScrollBarPolicy(30);
        topPanel.add(CountryScrollPanel, new GridConstraints(2, 2, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        countryPanel = new JPanel();
        countryPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        CountryScrollPanel.setViewportView(countryPanel);
        castPanel = new JPanel();
        castPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.add(castPanel, new GridConstraints(2, 3, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        castSearchCB1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Choose Actor/Actress");
        castSearchCB1.setModel(defaultComboBoxModel1);
        castPanel.add(castSearchCB1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB4 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("Choose Actor/Actress");
        castSearchCB4.setModel(defaultComboBoxModel2);
        castPanel.add(castSearchCB4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB2 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("Choose Actor/Actress");
        castSearchCB2.setModel(defaultComboBoxModel3);
        castPanel.add(castSearchCB2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB3 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("Choose Actor/Actress");
        castSearchCB3.setModel(defaultComboBoxModel4);
        castPanel.add(castSearchCB3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Tagpanel = new JPanel();
        Tagpanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.add(Tagpanel, new GridConstraints(2, 5, 6, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tagScrollPanel = new JScrollPane();
        Tagpanel.add(tagScrollPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        MovieResultPanel = new JPanel();
        MovieResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.add(MovieResultPanel, new GridConstraints(2, 8, 8, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        movieResultScrollPane = new JScrollPane();
        MovieResultPanel.add(movieResultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        movieAttributes = new JLabel();
        Font movieAttributesFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, movieAttributes.getFont());
        if (movieAttributesFont != null) movieAttributes.setFont(movieAttributesFont);
        movieAttributes.setForeground(new Color(-1));
        movieAttributes.setText("Movie Attributes");
        topPanel.add(movieAttributes, new GridConstraints(0, 0, 1, 8, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieResultLable = new JLabel();
        Font movieResultLableFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, movieResultLable.getFont());
        if (movieResultLableFont != null) movieResultLable.setFont(movieResultLableFont);
        movieResultLable.setForeground(new Color(-1));
        movieResultLable.setText("Movie Results");
        topPanel.add(movieResultLable, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchbetweenLabel = new JLabel();
        Font searchbetweenLabelFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, searchbetweenLabel.getFont());
        if (searchbetweenLabelFont != null) searchbetweenLabel.setFont(searchbetweenLabelFont);
        searchbetweenLabel.setForeground(new Color(-1));
        searchbetweenLabel.setText("Search Between Attribute  Values:");
        topPanel.add(searchbetweenLabel, new GridConstraints(9, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieYearLabel = new JLabel();
        Font movieYearLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, movieYearLabel.getFont());
        if (movieYearLabelFont != null) movieYearLabel.setFont(movieYearLabelFont);
        movieYearLabel.setForeground(new Color(-1));
        movieYearLabel.setText("Movie Year");
        topPanel.add(movieYearLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorLabel = new JLabel();
        Font directorLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, directorLabel.getFont());
        if (directorLabelFont != null) directorLabel.setFont(directorLabelFont);
        directorLabel.setForeground(new Color(-1));
        directorLabel.setText("Director");
        topPanel.add(directorLabel, new GridConstraints(6, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorSearchButton = new JButton();
        directorSearchButton.setText("Search");
        topPanel.add(directorSearchButton, new GridConstraints(7, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        genreLabel = new JLabel();
        Font genreLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, genreLabel.getFont());
        if (genreLabelFont != null) genreLabel.setFont(genreLabelFont);
        genreLabel.setForeground(new Color(-1));
        genreLabel.setText("Genres");
        topPanel.add(genreLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        countryLabel = new JLabel();
        Font countryLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, countryLabel.getFont());
        if (countryLabelFont != null) countryLabel.setFont(countryLabelFont);
        countryLabel.setForeground(new Color(-1));
        countryLabel.setText("Country");
        topPanel.add(countryLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castLabel = new JLabel();
        Font castLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, castLabel.getFont());
        if (castLabelFont != null) castLabel.setFont(castLabelFont);
        castLabel.setForeground(new Color(-1));
        castLabel.setText("Cast");
        topPanel.add(castLabel, new GridConstraints(1, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagidLabel = new JLabel();
        Font tagidLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, tagidLabel.getFont());
        if (tagidLabelFont != null) tagidLabel.setFont(tagidLabelFont);
        tagidLabel.setForeground(new Color(-1));
        tagidLabel.setText("Tag Ids and Values");
        topPanel.add(tagidLabel, new GridConstraints(1, 5, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagValueTextField = new JTextField();
        tagValueTextField.setText("Value");
        topPanel.add(tagValueTextField, new GridConstraints(9, 6, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 4, false));
        tagWeightComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel5 = new DefaultComboBoxModel();
        defaultComboBoxModel5.addElement("=,<,>,>=,<=");
        defaultComboBoxModel5.addElement("=");
        defaultComboBoxModel5.addElement("<");
        defaultComboBoxModel5.addElement(">");
        defaultComboBoxModel5.addElement("<=");
        defaultComboBoxModel5.addElement(">=");
        tagWeightComboBox.setModel(defaultComboBoxModel5);
        topPanel.add(tagWeightComboBox, new GridConstraints(8, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 3, false));
        selectAndOrComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel6 = new DefaultComboBoxModel();
        defaultComboBoxModel6.addElement("Select And, OR");
        defaultComboBoxModel6.addElement("AND");
        defaultComboBoxModel6.addElement("OR");
        selectAndOrComboBox.setModel(defaultComboBoxModel6);
        topPanel.add(selectAndOrComboBox, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieyearFromLabel = new JLabel();
        movieyearFromLabel.setForeground(new Color(-1));
        movieyearFromLabel.setText("From");
        topPanel.add(movieyearFromLabel, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieYearToLabel = new JLabel();
        movieYearToLabel.setForeground(new Color(-1));
        movieYearToLabel.setText("To");
        topPanel.add(movieYearToLabel, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fromDatePicker = new JDatePicker();
        topPanel.add(fromDatePicker, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        toDatePicker = new JDatePicker();
        topPanel.add(toDatePicker, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        castSearchButton1 = new JButton();
        castSearchButton1.setText("Search");
        topPanel.add(castSearchButton1, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton4 = new JButton();
        castSearchButton4.setText("Search");
        topPanel.add(castSearchButton4, new GridConstraints(5, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton2 = new JButton();
        castSearchButton2.setText("Search");
        topPanel.add(castSearchButton2, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton3 = new JButton();
        castSearchButton3.setText("Search");
        topPanel.add(castSearchButton3, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorSearchCB = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel7 = new DefaultComboBoxModel();
        defaultComboBoxModel7.addElement("Choose Director");
        directorSearchCB.setModel(defaultComboBoxModel7);
        topPanel.add(directorSearchCB, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1));
        label1.setText("Tag Weight");
        topPanel.add(label1, new GridConstraints(8, 5, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-1));
        label2.setText("Tag Value");
        topPanel.add(label2, new GridConstraints(9, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(bottomPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        bottomPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        userResultPanel = new JPanel();
        userResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(userResultPanel, new GridConstraints(0, 1, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        userResultScrollPane = new JScrollPane();
        userResultPanel.add(userResultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        QueryResultPanel = new JPanel();
        QueryResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(QueryResultPanel, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        queryResult = new JTextArea();
        QueryResultPanel.add(queryResult, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(buttonPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        executeMovieQueryButton = new JButton();
        executeMovieQueryButton.setText("Execute Movie Query");
        buttonPanel.add(executeMovieQueryButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearWindowsButton = new JButton();
        clearWindowsButton.setText("Clear All");
        buttonPanel.add(clearWindowsButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        executeUserQueryButton = new JButton();
        executeUserQueryButton.setText("Execute User Query");
        buttonPanel.add(executeUserQueryButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    private void titleAlign(JFrame frame) {

        Font font = frame.getFont();

        String currentTitle = frame.getTitle().trim();
        FontMetrics fm = frame.getFontMetrics(font);
        int frameWidth = frame.getWidth();
        int titleWidth = fm.stringWidth(currentTitle);
        int spaceWidth = fm.stringWidth(" ");
        int centerPos = (frameWidth / 2) - (titleWidth / 2);
        int spaceCount = centerPos / spaceWidth;
        String pad = "";
        pad = String.format("%" + (spaceCount - 14) + "s", pad);
        frame.setTitle(pad + currentTitle);

    }

    //UI methods

    //clearing genre panel
    private void removeGenrePanel() {
        for (JCheckBox cb : selectedGenres) {
            cb.setVisible(false);
            genreScrollPanel.remove(cb);
        }
        // clean global list and update GenrePanel
        selectedGenres.clear();
        genreScrollPanel.updateUI();
    }

    //remove Country Panel text
    private void removeCountryPanel() {
        for (JCheckBox cb : selectedCountries) {
            cb.setVisible(false);
            countryPanel.remove(cb);
        }
        // clean global list and update CountryPanel
        selectedCountries.clear();
        countryPanel.updateUI();
    }

    //clear tag panel

    private void removeTagPanel() {
        for (JCheckBox cb : selectedTags) {
            cb.setVisible(false);
            tagScrollPanel.remove(cb);
        }
        // clean global list and update FilmPanel
        selectedTags.clear();
        tagScrollPanel.updateUI();
    }

    //clearing all text fields

    private void removeAllText() {
        tagValueTextField.setText("");
        queryResult.setText("");
    }

    // updating fields

    /*
     * review and return which Genre or Country JCheckbox is selected or not
     */
    private ArrayList<String> selectCheckBox(AttrType type) {
        ArrayList<String> checkList = new ArrayList<>();
        ArrayList<JCheckBox> typeList = new ArrayList<>();
        if (type.equals(AttrType.Genres)) {
            typeList = selectedGenres;
        } else if (type.equals(AttrType.Countries)) {
            typeList = selectedCountries;
        }
        for (JCheckBox cb : typeList) {
            if (cb.isSelected()) {
                checkList.add(cb.getText());
            }
        }
        return checkList;
    }

    private void updateCountryPanel(ResultSet result) throws SQLException {
        removeCountryPanel();
        while (result.next()) {
            countryPanel.setLayout(new GridLayout(0, 1));
            String text = result.getString(1);
            if (!text.equals(" ")) { // some genres don't have country
                JCheckBox cb = new JCheckBox(text);
                cb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        /*
                        if (searchCondition == "OR") {
                            loadAllFilmCountry();
                        } else if (searchCondition == "AND") {
                            loadFilmCountry();
                        }
                        */
                    }
                });
                selectedCountries.add(cb);
                countryPanel.add(cb);
                countryPanel.revalidate();
                countryPanel.repaint();
            }
        }
    }

    private void loadCountry() {
        ArrayList<String> checkList = selectCheckBox(AttrType.Genres);
        ResultSet result = null;

        if (checkList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            // prepare query command

            if ((selectedMovieFrom == 1600) && (selectedMovieTo == 2999)) {
                sb.append("SELECT DISTINCT country\n");
                sb.append("FROM movie_countries loc, ");
                sb.append("(");
                sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
                sb.append("FROM movie_genres\n");
                sb.append("GROUP BY movieID) select_genre\n");
                sb.append("WHERE select_genre.movieID = loc.movieID AND ");
                sb.append("(");
                for (int i = 0; i < checkList.size(); i++) {
                    if (i == 0) {
                        sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    } else {
                        sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    }
                }
                sb.append(")\n");
                sb.append("ORDER BY country");
            } else {
                System.out.println(selectedMovieFrom);
                System.out.println(actualStartYear);
                System.out.println(actualEndYear);
                String starty = selectedMovieFrom.toString();
                String endy = selectedMovieTo.toString();
                if (selectedMovieFrom > Integer.valueOf(actualEndYear)) {
                    System.out.println("Invalid start year. Setting the start year to " + actualStartYear);
                    starty = actualStartYear;
                }
                if (selectedMovieTo < Integer.valueOf(actualStartYear)) {
                    System.out.println("Invalid start year. Setting the start end to " + actualEndYear);
                    endy = actualEndYear;
                }

                sb.append("SELECT DISTINCT country\n");
                sb.append("FROM movie_countries loc, ");
                sb.append("(");
                sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
                sb.append("FROM movie_genres\n");
                sb.append("GROUP BY movieID) select_genre");
                sb.append(", MOVIES mov\n");
                sb.append("WHERE select_genre.movieID = loc.movieID AND ");
                sb.append(" loc.MOVIEID = mov.MOVIEID AND");
                sb.append(" mov.YEAR between ").append(starty).append(" and ").append(endy).append(" AND ");
                sb.append("(");
                for (int i = 0; i < checkList.size(); i++) {
                    if (i == 0) {
                        sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    } else {
                        sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    }
                }
                sb.append(")\n");
                sb.append("ORDER BY country");

            }
//            sb.append("SELECT DISTINCT country\n");
//            sb.append("FROM movie_countries loc, ");
//            sb.append("(");
//            sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
//            sb.append("FROM movie_genres\n");
//            sb.append("GROUP BY movieID) select_genre\n");
//            sb.append("WHERE select_genre.movieID = loc.movieID AND ");
//            sb.append("(");
//            for (int i = 0; i < checkList.size(); i++) {
//                if (i == 0) {
//                    sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
//                } else {
//                    sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
//                }
//            }
//            sb.append(")\n");
//            sb.append("ORDER BY country");
            queryResult.setText(sb.toString());
            // connection DB and execute query command
            try {
                result = executeQuery(sb.toString());
                updateCountryPanel(result);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeCountryPanel();
        }
    }


    private void updateGenresPanel(ResultSet result) throws SQLException {
        removeCountryPanel();
        while (result.next()) {
            genrePanel.setLayout(new GridLayout(0, 1));
//            genrePanel.setLayout(new GridLayout(0, 5, 20, 20));
            JCheckBox cb = new JCheckBox(result.getString(1));
//            System.out.println(result.getString(1));

            cb.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    /*
                    if (searchCondition == "OR") {
                        loadAllCountry();
                    } else if (searchCondition == "AND") {
                        loadCountry();
                    }
                    */
                    // according 3) the countries matching the genres selections will be listed
                    loadCountry();
                }
            });
            // add all queried genres JCheckbox to global variable
            selectedGenres.add(cb);
            // update GenrePanel with genres JCheckbox
            genrePanel.add(cb);
            genrePanel.revalidate();
            genrePanel.repaint();
        }
        System.out.println("Load Genre completely");
    }


    //database connection codes
    private Connection openConnect() throws SQLException, ClassNotFoundException {
        // Load Oracle DB driver
        DriverManager.registerDriver(new OracleDriver());
        // hard-coded configuration to connect DB server
        String host = "localhost";
        String port = "1521";
        String dbName = "orcl"; // Win: xe, MAC: orcl
        String uName = "scott";
        String pWord = "scott";

        // Construct JDBC URL
        String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;
        return DriverManager.getConnection(dbURL, uName, pWord);
    }

    /*
     * Close the database connection
     */
    private void closeConnect() {
        try {
            conn.close();
            System.out.println("Disconnect DB ...");
        } catch (SQLException e) {
            System.err.println("[Error]: Cannot close Oracle DB connection: " + e.getMessage());
        }
    }

    /*
     *  Query Execute function
     */
    private ResultSet executeQuery(String query) {
        Statement stmt = null;
        ResultSet result = null;
        try {
            System.out.print("Connect DB .... ");
            conn = openConnect();
            System.out.println("successfully ");
            stmt = conn.createStatement();
            result = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            //closeConnect();
        }

        return result;
    }

    /*
     * For debug purpose
     */
    private void showResultSet(ResultSet result) throws SQLException {
        System.out.println("[DEBUG INFO]");
        ResultSetMetaData meta = result.getMetaData();
        //int tupleCount = 1;
        while (result.next()) {
            // System.out.print("Tuple " + tupleCount++ + " : ");
            // System.out.print("Tuple " + tupleCount++ + " : ");
            for (int col = 1; col <= meta.getColumnCount(); col++) {

                System.out.print("\"" + result.getString(col) + "\",");
            }
            System.out.println();
        }
    }

    private void performLoadButton() {
        //getting the actual start and end year from table
        String queryForStartYear = "select * from (select mov.YEAR from MOVIES mov order by mov.YEAR asc) where ROWNUM <=1";
        String queryForEndYear = "select * from (select mov.YEAR from MOVIES mov order by mov.YEAR desc) where ROWNUM <=1";
        ResultSet qfsy;
        ResultSet qfey;

        try {
            qfsy = executeQuery(queryForStartYear);
            qfey = executeQuery(queryForEndYear);
            while (qfsy.next()) {
                actualStartYear = qfsy.getString(1);
            }
            while (qfey.next()) {
                actualEndYear = qfey.getString(1);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }


        ResultSet result;
        // clean ui information
        removeGenrePanel();
        removeCountryPanel();
        removeTagPanel();
        removeAllText();
        tagWeightComboBox.setSelectedIndex(0);
        selectAndOrComboBox.setSelectedIndex(0);

        System.out.println("Start to load all Genres data");
        try {
            String query = "SELECT DISTINCT genre\n" + "FROM movie_genres\n" + "ORDER BY genre";
            result = executeQuery(query);
            updateGenresPanel(result);
            /*
            query = "SELECT DISTINCT country\n" + "FROM movie_countries\n";
            result = executeQuery(query);
            updateCountryPanel(result);
            */
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }


    public hw3() {
        conn = null;
        selectedGenres = new ArrayList<>();
        selectedCountries = new ArrayList<>();
        selectedFilmCountries = new ArrayList<>();
        selectedTags = new ArrayList<>();
        searchCondition = "OR";
        queryCondition = "AND";
        performLoadButton();
        clearWindowsButton.addActionListener(e -> {
//                removeGenrePanel();
            fromDatePicker.getModel().setYear(Integer.valueOf(actualStartYear));
            fromDatePicker.getModel().setMonth(0);
            fromDatePicker.getModel().setDay(1);
            toDatePicker.getModel().setYear(Integer.valueOf(actualEndYear));
            toDatePicker.getModel().setMonth(0);
            toDatePicker.getModel().setDay(1);

            removeCountryPanel();
            removeTagPanel();
            removeAllText();
            tagWeightComboBox.setSelectedIndex(0);
            selectAndOrComboBox.setSelectedIndex(0);
        });
        selectAndOrComboBox.addActionListener(e -> {
            //System.out.println(selectAndOrComboBox.getSelectedItem());
            if (selectAndOrComboBox.getSelectedItem() == "AND" || selectAndOrComboBox.getSelectedItem() == "OR") {
//                    System.out.println(selectAndOrComboBox.getSelectedItem());
                searchCondition = selectAndOrComboBox.getSelectedItem().toString();
                loadCountry();
            }
        });

        fromDatePicker.addActionListener(e -> {
            selectedMovieFrom = fromDatePicker.getModel().getYear();
            System.out.println(selectedMovieFrom);
            loadCountry();

        });
        toDatePicker.addActionListener(e -> {
            selectedMovieTo = toDatePicker.getModel().getYear();
            System.out.println(selectedMovieTo);
            loadCountry();
        });
    }

    public void startQueryEngine() {
        // initialize UI framework

        JFrame frame = new JFrame("Movie Query Engine");
        frame.setContentPane(new hw3().MainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }


    public static void main(String args[]) {
//        System.out.println("Hello");
        hw3 startPoint = new hw3();
        startPoint.startQueryEngine();
    }


}
