import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import oracle.jdbc.OracleDriver;
import org.jdatepicker.JDatePicker;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;

public class hw3 {
    private JPanel MainPanel;
    private JPanel topPanel;
    private JPanel bottomPanel;
    private JScrollPane genreScrollPanel;
    private JScrollPane CountryScrollPanel;
    private JPanel castPanel;
    private JPanel Tagpanel;
    private JPanel MovieResultPanel;
    private JLabel movieAttributes;
    private JLabel movieResultLable;
    private JLabel searchbetweenLabel;
    private JLabel movieYearLabel;
    private JLabel directorLabel;
    private JButton directorSearchButton;
    private JLabel genreLabel;
    private JLabel countryLabel;
    private JLabel castLabel;
    private JLabel tagidLabel;
    private JComboBox<String> tagWeightComboBox;
    private JComboBox<String> selectAndOrComboBox;
    private JPanel userResultPanel;
    private JPanel QueryResultPanel;
    private JPanel buttonPanel;
    private JTextArea queryResult;
    private JButton executeMovieQueryButton;
    private JButton clearWindowsButton;
    private JButton executeUserQueryButton;
    private JScrollPane movieResultScrollPane;
    private JScrollPane userResultScrollPane;
    private JScrollPane tagScrollPanel;
    private JPanel genrePanel;
    private JPanel countryPanel;
    private JLabel movieyearFromLabel;
    private JLabel movieYearToLabel;
    private JDatePicker fromDatePicker;
    private JDatePicker toDatePicker;
    private JComboBox<String> castSearchCB1;
    private JComboBox<String> castSearchCB4;
    private JComboBox<String> castSearchCB2;
    private JComboBox<String> castSearchCB3;
    private JButton castSearchButton1;
    private JButton castSearchButton4;
    private JButton castSearchButton2;
    private JButton castSearchButton3;
    private JComboBox<String> directorSearchCB;
    private JPanel tagPanel;
    private JComboBox<Integer> tagValueComboBox;
    private JLabel tagWeightLabel;
    private JLabel TagValueLabel;
    private JTable queryResultTable;
    private JScrollPane queryResultScrollPane;
    private JTable userResultTable;


    //global variables

    private ArrayList<JCheckBox> selectedGenres;
    private ArrayList<JCheckBox> selectedCountries;
    private ArrayList<JCheckBox> selectedTags;
    private String searchCondition;
    private String queryCondition;
    private Connection conn;
    private DefaultTableModel tModel;
    private DefaultTableModel uModel;
    private Integer selectedMovieFrom = 1600;
    private Integer selectedMovieTo = 2999;
    private String actualStartYear = "";
    private String actualEndYear = "";
    private String selectedCast1 = "";
    private String selectedCast2 = "";
    private String selectedCast3 = "";
    private String selectedCast4 = "";
    private String selecteddirector = "";
    private String selectedTagWeight = "";
    private String selectedTagValue = "";
    private HashMap<Integer, Integer> selectedMoviesFromQuery = new HashMap<>();
    private int[] selectedRowsFromMovieResult;


    public enum AttrType {
        Genres,
        Countries,
        Tags
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.setBackground(new Color(-16777216));
        MainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        topPanel = new JPanel();
        topPanel.setLayout(new GridLayoutManager(10, 14, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.setBackground(new Color(-16777216));
        topPanel.setEnabled(true);
        Font topPanelFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, topPanel.getFont());
        if (topPanelFont != null) topPanel.setFont(topPanelFont);
        MainPanel.add(topPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(24, 271), null, 0, false));
        genreScrollPanel = new JScrollPane();
        genreScrollPanel.setBackground(new Color(-14275789));
        genreScrollPanel.setForeground(new Color(-14275789));
        topPanel.add(genreScrollPanel, new GridConstraints(2, 0, 4, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        genrePanel = new JPanel();
        genrePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        genrePanel.setEnabled(true);
        genrePanel.setForeground(new Color(-14275789));
        genreScrollPanel.setViewportView(genrePanel);
        CountryScrollPanel = new JScrollPane();
        CountryScrollPanel.setHorizontalScrollBarPolicy(30);
        topPanel.add(CountryScrollPanel, new GridConstraints(2, 2, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        countryPanel = new JPanel();
        countryPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        CountryScrollPanel.setViewportView(countryPanel);
        castPanel = new JPanel();
        castPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        castPanel.setForeground(new Color(-16777216));
        topPanel.add(castPanel, new GridConstraints(2, 3, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        castSearchCB1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Choose Actor/Actress");
        castSearchCB1.setModel(defaultComboBoxModel1);
        castPanel.add(castSearchCB1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB4 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("Choose Actor/Actress");
        castSearchCB4.setModel(defaultComboBoxModel2);
        castPanel.add(castSearchCB4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB2 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("Choose Actor/Actress");
        castSearchCB2.setModel(defaultComboBoxModel3);
        castPanel.add(castSearchCB2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchCB3 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("Choose Actor/Actress");
        castSearchCB3.setModel(defaultComboBoxModel4);
        castPanel.add(castSearchCB3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Tagpanel = new JPanel();
        Tagpanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.add(Tagpanel, new GridConstraints(2, 5, 6, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tagScrollPanel = new JScrollPane();
        Tagpanel.add(tagScrollPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tagPanel = new JPanel();
        tagPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tagScrollPanel.setViewportView(tagPanel);
        MovieResultPanel = new JPanel();
        MovieResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel.add(MovieResultPanel, new GridConstraints(2, 8, 8, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        movieResultScrollPane = new JScrollPane();
        MovieResultPanel.add(movieResultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        queryResultTable = new JTable();
        movieResultScrollPane.setViewportView(queryResultTable);
        movieAttributes = new JLabel();
        Font movieAttributesFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, movieAttributes.getFont());
        if (movieAttributesFont != null) movieAttributes.setFont(movieAttributesFont);
        movieAttributes.setForeground(new Color(-1));
        movieAttributes.setText("Movie Attributes");
        topPanel.add(movieAttributes, new GridConstraints(0, 0, 1, 8, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieResultLable = new JLabel();
        Font movieResultLableFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, movieResultLable.getFont());
        if (movieResultLableFont != null) movieResultLable.setFont(movieResultLableFont);
        movieResultLable.setForeground(new Color(-1));
        movieResultLable.setText("Movie Results");
        topPanel.add(movieResultLable, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchbetweenLabel = new JLabel();
        Font searchbetweenLabelFont = this.$$$getFont$$$("Century Schoolbook", Font.BOLD, 16, searchbetweenLabel.getFont());
        if (searchbetweenLabelFont != null) searchbetweenLabel.setFont(searchbetweenLabelFont);
        searchbetweenLabel.setForeground(new Color(-1));
        searchbetweenLabel.setText("Search Between Attribute  Values:");
        topPanel.add(searchbetweenLabel, new GridConstraints(9, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieYearLabel = new JLabel();
        Font movieYearLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, movieYearLabel.getFont());
        if (movieYearLabelFont != null) movieYearLabel.setFont(movieYearLabelFont);
        movieYearLabel.setForeground(new Color(-1));
        movieYearLabel.setText("Movie Year");
        topPanel.add(movieYearLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorLabel = new JLabel();
        Font directorLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, directorLabel.getFont());
        if (directorLabelFont != null) directorLabel.setFont(directorLabelFont);
        directorLabel.setForeground(new Color(-1));
        directorLabel.setText("Director");
        topPanel.add(directorLabel, new GridConstraints(6, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorSearchButton = new JButton();
        directorSearchButton.setText("select");
        topPanel.add(directorSearchButton, new GridConstraints(7, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        genreLabel = new JLabel();
        Font genreLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, genreLabel.getFont());
        if (genreLabelFont != null) genreLabel.setFont(genreLabelFont);
        genreLabel.setForeground(new Color(-1));
        genreLabel.setText("Genres");
        topPanel.add(genreLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        countryLabel = new JLabel();
        Font countryLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, countryLabel.getFont());
        if (countryLabelFont != null) countryLabel.setFont(countryLabelFont);
        countryLabel.setForeground(new Color(-1));
        countryLabel.setText("Country");
        topPanel.add(countryLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castLabel = new JLabel();
        Font castLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, castLabel.getFont());
        if (castLabelFont != null) castLabel.setFont(castLabelFont);
        castLabel.setForeground(new Color(-1));
        castLabel.setText("Cast");
        topPanel.add(castLabel, new GridConstraints(1, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagidLabel = new JLabel();
        Font tagidLabelFont = this.$$$getFont$$$(null, Font.BOLD, 16, tagidLabel.getFont());
        if (tagidLabelFont != null) tagidLabel.setFont(tagidLabelFont);
        tagidLabel.setForeground(new Color(-1));
        tagidLabel.setText("Tag Ids and Values");
        topPanel.add(tagidLabel, new GridConstraints(1, 5, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagWeightComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel5 = new DefaultComboBoxModel();
        defaultComboBoxModel5.addElement("=,<,>,>=,<=");
        defaultComboBoxModel5.addElement("=");
        defaultComboBoxModel5.addElement("<");
        defaultComboBoxModel5.addElement(">");
        defaultComboBoxModel5.addElement("<=");
        defaultComboBoxModel5.addElement(">=");
        tagWeightComboBox.setModel(defaultComboBoxModel5);
        topPanel.add(tagWeightComboBox, new GridConstraints(8, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectAndOrComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel6 = new DefaultComboBoxModel();
        defaultComboBoxModel6.addElement("Select And, OR");
        defaultComboBoxModel6.addElement("AND");
        defaultComboBoxModel6.addElement("OR");
        selectAndOrComboBox.setModel(defaultComboBoxModel6);
        topPanel.add(selectAndOrComboBox, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieyearFromLabel = new JLabel();
        movieyearFromLabel.setForeground(new Color(-1));
        movieyearFromLabel.setText("From");
        topPanel.add(movieyearFromLabel, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movieYearToLabel = new JLabel();
        movieYearToLabel.setForeground(new Color(-1));
        movieYearToLabel.setText("To");
        topPanel.add(movieYearToLabel, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fromDatePicker = new JDatePicker();
        topPanel.add(fromDatePicker, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        toDatePicker = new JDatePicker();
        topPanel.add(toDatePicker, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        castSearchButton1 = new JButton();
        castSearchButton1.setText("select");
        topPanel.add(castSearchButton1, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton4 = new JButton();
        castSearchButton4.setText("select");
        topPanel.add(castSearchButton4, new GridConstraints(5, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton2 = new JButton();
        castSearchButton2.setText("Select");
        topPanel.add(castSearchButton2, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        castSearchButton3 = new JButton();
        castSearchButton3.setText("select");
        topPanel.add(castSearchButton3, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directorSearchCB = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel7 = new DefaultComboBoxModel();
        defaultComboBoxModel7.addElement("Choose Director");
        directorSearchCB.setModel(defaultComboBoxModel7);
        topPanel.add(directorSearchCB, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagWeightLabel = new JLabel();
        tagWeightLabel.setForeground(new Color(-1));
        tagWeightLabel.setText("Tag Weight");
        topPanel.add(tagWeightLabel, new GridConstraints(8, 5, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TagValueLabel = new JLabel();
        TagValueLabel.setForeground(new Color(-1));
        TagValueLabel.setText("Tag Value");
        topPanel.add(TagValueLabel, new GridConstraints(9, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagValueComboBox = new JComboBox();
        topPanel.add(tagValueComboBox, new GridConstraints(9, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(bottomPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        bottomPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        userResultPanel = new JPanel();
        userResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(userResultPanel, new GridConstraints(0, 1, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        userResultScrollPane = new JScrollPane();
        userResultPanel.add(userResultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        userResultTable = new JTable();
        userResultScrollPane.setViewportView(userResultTable);
        QueryResultPanel = new JPanel();
        QueryResultPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(QueryResultPanel, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        queryResultScrollPane = new JScrollPane();
        QueryResultPanel.add(queryResultScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        queryResult = new JTextArea();
        queryResultScrollPane.setViewportView(queryResult);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel.add(buttonPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        executeMovieQueryButton = new JButton();
        executeMovieQueryButton.setText("Execute Movie Query");
        buttonPanel.add(executeMovieQueryButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearWindowsButton = new JButton();
        clearWindowsButton.setText("Clear All");
        buttonPanel.add(clearWindowsButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        executeUserQueryButton = new JButton();
        executeUserQueryButton.setText("Execute User Query");
        buttonPanel.add(executeUserQueryButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    //UI methods

    //clearing genre panel
    private void removeGenrePanel() {
        for (JCheckBox cb : selectedGenres) {
            cb.setVisible(false);
            genreScrollPanel.remove(cb);
        }
        // clean global list and update GenrePanel
        selectedGenres.clear();
        genreScrollPanel.updateUI();
    }

    //remove Country Panel text
    private void removeCountryPanel() {
        for (JCheckBox cb : selectedCountries) {
            cb.setVisible(false);
            countryPanel.remove(cb);
        }
        // clean global list and update CountryPanel
        selectedCountries.clear();
        countryPanel.updateUI();
    }

    //clear tag panel

    private void removeTagPanel() {
        for (JCheckBox cb : selectedTags) {
            cb.setVisible(false);
            tagPanel.remove(cb);
        }
        // clean global list and update FilmPanel
        selectedTags.clear();
        tagPanel.updateUI();
    }

    //clearing all text fields

    private void removeAllText() {
//        tagValueTextField.setText("");
        queryResult.setText("");
    }

    private void removeComboBox() {
        castSearchCB1.removeAllItems();
        castSearchCB2.removeAllItems();
        castSearchCB3.removeAllItems();
        castSearchCB4.removeAllItems();
        directorSearchCB.removeAllItems();
    }

    // updating fields

    /*
     * review and return which Genre or Country JCheckbox is selected or not
     */
    private ArrayList<String> selectCheckBox(AttrType type) {
        ArrayList<String> checkList = new ArrayList<>();
        ArrayList<JCheckBox> typeList = new ArrayList<>();
        if (type.equals(AttrType.Genres)) {
            typeList = selectedGenres;
        } else if (type.equals(AttrType.Countries)) {
            typeList = selectedCountries;
        } else if (type.equals(AttrType.Tags)) {
            typeList = selectedTags;
        }
        for (JCheckBox cb : typeList) {
            if (cb.isSelected()) {
                checkList.add(cb.getText());
            }
        }
        return checkList;
    }

    private void updateTagPanel(ResultSet result) throws SQLException {
        removeTagPanel();
        DefaultComboBoxModel<Integer> defaultComboBoxModel6 = new DefaultComboBoxModel<>();
        HashMap<Integer, Integer> uniqueWeight = new HashMap<>();
        while (result.next()) {
            tagPanel.setLayout(new GridLayout(0, 1));
            String tagid = result.getString(1);
            String tagtext = result.getString(2);
            Integer tagweight = result.getInt(3);
            if (!uniqueWeight.containsKey(tagweight)) {
                defaultComboBoxModel6.addElement(tagweight);
                tagValueComboBox.setModel(defaultComboBoxModel6);
                uniqueWeight.put(tagweight, tagweight);
            }

            if (!tagid.equals(" ") && !tagtext.equals(" ")) { // some genres don't have country
                JCheckBox cb = new JCheckBox(tagid + " " + tagtext);
                cb.addActionListener(e -> {
                });
                selectedTags.add(cb);
                tagPanel.add(cb);
                tagPanel.revalidate();
                tagPanel.repaint();
            }
        }
    }

    private void loadTags() {
        ArrayList<String> checkList = selectCheckBox(AttrType.Countries);
        ArrayList<String> gcheckList = selectCheckBox(AttrType.Genres);
        ResultSet result;

        if (checkList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            // prepare query command

            sb.append("select distinct mtag.TAGID,tag.VALUE, mtag.TAGWEIGHT\n");
            sb.append("from MOVIE_TAGS mtag, TAGS tag, MOVIE_COUNTRIES loc, MOVIES mov1,\n");
            sb.append("(SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n" +
                    "FROM movie_genres\n" +
                    "GROUP BY movieID) select_genre\n");
            sb.append("where mov1.MOVIEID = mtag.MOVIEID\n");
            sb.append("and mov1.MOVIEID = select_genre.MOVIEID\n");
            sb.append("and mov1.MOVIEID = loc.MOVIEID\n");
            sb.append("and tag.TAGID = mtag.TAGID\n");
            sb.append("and loc.COUNTRY in (");
            for (int i = 0; i < checkList.size(); i++) {
                if (i != checkList.size() - 1) {
                    sb.append("'").append(checkList.get(i)).append("',");
                } else {
                    sb.append("'").append(checkList.get(i)).append("'");
                }
            }
            sb.append(")");
            sb.append("AND");
            sb.append("(");
            for (int i = 0; i < gcheckList.size(); i++) {
                if (i == 0) {
                    sb.append("select_genre.Genres LIKE '%" + gcheckList.get(i) + "%'\n");
                } else {
                    sb.append(searchCondition + " select_genre.Genres LIKE '%" + gcheckList.get(i) + "%'\n");
                }
            }
            sb.append(")\n");
            queryResult.setText(sb.toString());
            try {
                result = executeQuery(sb.toString());
                updateTagPanel(result);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeTagPanel();
            tagValueComboBox.removeAllItems();
        }
    }

    private void updateCountryPanel(ResultSet result) throws SQLException {
        removeCountryPanel();
        while (result.next()) {
            countryPanel.setLayout(new GridLayout(0, 1));
            String text = result.getString(1);
            if (!text.equals(" ")) {
                JCheckBox cb = new JCheckBox(text);
                cb.addActionListener(e -> {
                    loadTags();
                    populateCast_directorCB();
                });
                selectedCountries.add(cb);
                countryPanel.add(cb);
                countryPanel.revalidate();
                countryPanel.repaint();
            }
        }
    }

    private void loadCountry() {
        ArrayList<String> checkList = selectCheckBox(AttrType.Genres);
        ResultSet result;

        if (checkList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            // prepare query command

            if ((selectedMovieFrom == 1600) && (selectedMovieTo == 2999)) {
                sb.append("SELECT DISTINCT country\n");
                sb.append("FROM movie_countries loc, ");
                sb.append("(");
                sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
                sb.append("FROM movie_genres\n");
                sb.append("GROUP BY movieID) select_genre\n");
                sb.append("WHERE select_genre.movieID = loc.movieID AND ");
                sb.append("(");
                for (int i = 0; i < checkList.size(); i++) {
                    if (i == 0) {
                        sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    } else {
                        sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    }
                }
                sb.append(")\n");
                sb.append("ORDER BY country");
            } else {
                System.out.println(selectedMovieFrom);
                System.out.println(actualStartYear);
                System.out.println(actualEndYear);
                String starty = selectedMovieFrom.toString();
                String endy = selectedMovieTo.toString();
                if (selectedMovieFrom > Integer.valueOf(actualEndYear)) {
                    System.out.println("Invalid start year. Setting the start year to " + actualStartYear);
                    starty = actualStartYear;
                }
                if (selectedMovieTo < Integer.valueOf(actualStartYear)) {
                    System.out.println("Invalid start year. Setting the start end to " + actualEndYear);
                    endy = actualEndYear;
                }

                sb.append("SELECT DISTINCT country\n");
                sb.append("FROM movie_countries loc, ");
                sb.append("(");
                sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
                sb.append("FROM movie_genres\n");
                sb.append("GROUP BY movieID) select_genre");
                sb.append(", MOVIES mov\n");
                sb.append("WHERE select_genre.movieID = loc.movieID AND ");
                sb.append(" loc.MOVIEID = mov.MOVIEID AND");
                sb.append(" mov.YEAR between ").append(starty).append(" and ").append(endy).append(" AND ");
                sb.append("(");
                for (int i = 0; i < checkList.size(); i++) {
                    if (i == 0) {
                        sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    } else {
                        sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                    }
                }
                sb.append(")\n");
                sb.append("ORDER BY country");

            }
            queryResult.setText(sb.toString());
            try {
                result = executeQuery(sb.toString());
                updateCountryPanel(result);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeCountryPanel();
        }
    }


    private void updateGenresPanel(ResultSet result) throws SQLException {
        removeCountryPanel();
        while (result.next()) {
            genrePanel.setLayout(new GridLayout(0, 1));
            JCheckBox cb = new JCheckBox(result.getString(1));

            cb.addActionListener(e -> {

                loadCountry();
                populateCast_directorCB();
            });
            selectedGenres.add(cb);
            genrePanel.add(cb);
            genrePanel.revalidate();
            genrePanel.repaint();
        }
        System.out.println("Load Genre completely");
    }


    //database connection codes
    private Connection openConnect() throws SQLException, ClassNotFoundException {
        DriverManager.registerDriver(new OracleDriver());
        String host = "localhost";
        String port = "1521";
        String dbName = "orcl";
        String uName = "scott";
        String pWord = "scott";

        String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;
        return DriverManager.getConnection(dbURL, uName, pWord);
    }


    private void closeConnect() {
        try {
            conn.close();
            System.out.println("Disconnect DB ...");
        } catch (SQLException e) {
            System.err.println("[Error]: Cannot close Oracle DB connection: " + e.getMessage());
        }
    }

    /*
     *  Query Execute function
     */
    private ResultSet executeQuery(String query) {
        Statement stmt;
        ResultSet result = null;
        try {
            System.out.print("Connect DB .... ");
            conn = openConnect();
            System.out.println("successfully ");
            stmt = conn.createStatement();
            result = stmt.executeQuery(query);
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }

        return result;
    }


    private void populateCast_directorCB() {
        removeComboBox();
        ArrayList<String> CountrycheckList = selectCheckBox(AttrType.Countries);
        ArrayList<String> genreCheckList = selectCheckBox(AttrType.Genres);
        HashMap<String, Integer> uniqueCast = new HashMap<>();
        HashMap<String, Integer> uniqueDirector = new HashMap<>();
        ResultSet castRS;
        ResultSet directorRS;
        StringBuilder cast1 = new StringBuilder();
        StringBuilder director1 = new StringBuilder();

        if (genreCheckList.size() != 0) {
            if (CountrycheckList.size() == 0) {
                cast1.append("select distinct ma.ACTORNAME from MOVIE_ACTORS ma,\n");
                cast1.append(" (SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n" +
                        "                                                    FROM movie_genres\n" +
                        "                                                    GROUP BY movieID) select_genre, MOVIES mov\n");
                cast1.append("WHERE select_genre.movieID = ma.movieID\n");
                cast1.append("and ma.MOVIEID = mov.MOVIEID AND\n");
                cast1.append("(");

                director1.append("select distinct md.DIRECTORNAME from MOVIE_DIRECTORS md,\n");
                director1.append(" (SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n" +
                        "                                                    FROM movie_genres\n" +
                        "                                                    GROUP BY movieID) select_genre, MOVIES mov\n");
                director1.append("WHERE select_genre.movieID = md.movieID\n");
                director1.append("and md.MOVIEID = mov.MOVIEID AND\n");
                director1.append("(");


                for (int i = 0; i < genreCheckList.size(); i++) {
                    if (i == 0) {
                        cast1.append("select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                        director1.append("select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                    } else {
                        cast1.append(searchCondition).append(" select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                        director1.append(searchCondition).append(" select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                    }
                }
                cast1.append(")\n");
                cast1.append("ORDER BY ma.ACTORNAME");
                director1.append(")\n");
                director1.append("ORDER BY md.DIRECTORNAME");

            } else {
                cast1.append("select distinct  ma.ACTORNAME from MOVIE_ACTORS ma, MOVIES mov,\n" +
                        "(SELECT movieID, LISTAGG(genre, ',')\n" +
                        "WITHIN GROUP (ORDER BY genre) AS Genres\n" +
                        "FROM movie_genres\n" +
                        "GROUP BY movieID) select_genre,\n" +
                        "MOVIE_COUNTRIES loc\n");
                cast1.append("where ma.MOVIEID = mov.MOVIEID\n" +
                        "and mov.MOVIEID = select_genre.MOVIEID\n" +
                        "and mov.MOVIEID = loc.MOVIEID\n");
                cast1.append("and loc.COUNTRY in (");

                director1.append("select distinct  md.DIRECTORNAME from MOVIE_DIRECTORS md, MOVIES mov,\n" +
                        "(SELECT movieID, LISTAGG(genre, ',')\n" +
                        "WITHIN GROUP (ORDER BY genre) AS Genres\n" +
                        "FROM movie_genres\n" +
                        "GROUP BY movieID) select_genre,\n" +
                        "MOVIE_COUNTRIES loc\n");
                director1.append("where md.MOVIEID = mov.MOVIEID\n" +
                        "and mov.MOVIEID = select_genre.MOVIEID\n" +
                        "and mov.MOVIEID = loc.MOVIEID\n");
                director1.append("and loc.COUNTRY in (");
                for (int i = 0; i < CountrycheckList.size(); i++) {
                    if (i != CountrycheckList.size() - 1) {
                        cast1.append("'").append(CountrycheckList.get(i)).append("',");
                        director1.append("'").append(CountrycheckList.get(i)).append("',");
                    } else {
                        cast1.append("'").append(CountrycheckList.get(i)).append("'");
                        director1.append("'").append(CountrycheckList.get(i)).append("'");
                    }
                }
                cast1.append(")\n");
                cast1.append(" AND \n");
                cast1.append("(");
                director1.append(")\n");
                director1.append(" AND \n");
                director1.append("(");
                for (int i = 0; i < genreCheckList.size(); i++) {
                    if (i == 0) {
                        cast1.append("select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                        director1.append("select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                    } else {
                        cast1.append(searchCondition).append(" select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                        director1.append(searchCondition).append(" select_genre.Genres LIKE '%").append(genreCheckList.get(i)).append("%'\n");
                    }
                }
                cast1.append(")\n");
                director1.append(")\n");

                cast1.append("ORDER BY ma.ACTORNAME");
                director1.append("ORDER BY md.DIRECTORNAME");

            }
            queryResult.append("\n");
            queryResult.append("-----------------------------------------------------------\n");
            queryResult.append(cast1.toString());

            queryResult.append("\n");
            queryResult.append("-----------------------------------------------------------\n");
            queryResult.append(director1.toString());

            try {
                castRS = executeQuery(cast1.toString());
                directorRS = executeQuery(director1.toString());
                castSearchCB1.addItem("Choose Actor/Actress");
                castSearchCB2.addItem("Choose Actor/Actress");
                castSearchCB3.addItem("Choose Actor/Actress");
                castSearchCB4.addItem("Choose Actor/Actress");
                directorSearchCB.addItem("Choose Director");

                while (castRS.next()) {
                    String castName = castRS.getString(1);
                    if (!uniqueCast.containsKey(castName)) {
                        castSearchCB1.addItem(castName);
                        castSearchCB2.addItem(castName);
                        castSearchCB3.addItem(castName);
                        castSearchCB4.addItem(castName);
                        uniqueCast.put(castName, 1);
                    }
                }
                while (directorRS.next()) {
                    String directorName = directorRS.getString(1);
                    if (!uniqueDirector.containsKey(directorName)) {
                        directorSearchCB.addItem(directorName);
                        uniqueDirector.put(directorName, 1);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeComboBox();

        }

    }

    private String createCollectiveQuery() {
        ArrayList<String> sGenre = selectCheckBox(AttrType.Genres);
        ArrayList<String> sCountry = selectCheckBox(AttrType.Countries);
        ArrayList<String> sTags = selectCheckBox(AttrType.Tags);

        if (sGenre.size() == 0) {
            JOptionPane.showMessageDialog(null, "Please select at least one Genre and Country");
            return " ";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("select distinct mov.MOVIEID, mov.TITLE, mg.Genres, mov.YEAR, moc.COUNTRY,md.DIRECTORNAME\n");
        sb.append("from MOVIES mov, MOVIE_COUNTRIES moc, MOVIE_ACTORS ma, MOVIE_DIRECTORS md,\n");
        sb.append("(SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
        sb.append("\t\t\t\t\t\tFROM movie_genres\n");
        sb.append("\t\t\t\t\t\tGROUP BY movieID) mg\n");
        if (!(tagPanel.getComponentCount() == 0 || sTags.size() == 0)) {
            sb.append(",MOVIE_TAGS mt\n");
        }
        sb.append("where mov.MOVIEID = moc.MOVIEID\n");
        sb.append("  and mov.MOVIEID = ma.MOVIEID\n");
        sb.append("  and mov.MOVIEID = md.MOVIEID\n");
        sb.append("  and mov.MOVIEID = mg.MOVIEID\n");
        if (!(tagPanel.getComponentCount() == 0 || sTags.size() == 0)) {
            sb.append("and mov.MOVIEID = mt.MOVIEID\n");
        }
        sb.append("AND");
        sb.append("(");
        for (int i = 0; i < sGenre.size(); i++) {
            if (i == 0) {
                sb.append("mg.Genres LIKE '%" + sGenre.get(i) + "%'\n");
            } else {
                sb.append(searchCondition + " mg.Genres LIKE '%" + sGenre.get(i) + "%'\n");
            }
        }
        sb.append(")\n");

        if (sCountry.size() == 0) {
            return sb.toString();
        }
        sb.append("and moc.COUNTRY in (");
        for (int i = 0; i < sCountry.size(); i++) {
            if (!(i == sCountry.size() - 1)) {
                sb.append("'").append(sCountry.get(i)).append("', ");
            } else {
                sb.append("'").append(sCountry.get(i)).append("')\n");
            }
        }
        boolean castset1 = castset(castSearchCB1);
        boolean castset2 = castset(castSearchCB2);
        boolean castset3 = castset(castSearchCB3);
        boolean castset4 = castset(castSearchCB4);
        boolean direcset = directorset(directorSearchCB);
        StringBuilder movieActor = new StringBuilder();
        movieActor.append(" ");
        if (castset1 || castset2 || castset3 || castset4) {
            movieActor.append("and ma.ACTORNAME in (");
            if (castset1) movieActor.append("'").append(castSearchCB1.getSelectedItem().toString()).append("',");
            if (castset2) movieActor.append("'").append(castSearchCB2.getSelectedItem().toString()).append("',");
            if (castset3) movieActor.append("'").append(castSearchCB3.getSelectedItem().toString()).append("',");
            if (castset4) movieActor.append("'").append(castSearchCB4.getSelectedItem().toString()).append("',");
            movieActor.append(")");
            movieActor.setCharAt(movieActor.length() - 2, ' ');
        }
        sb.append(movieActor.toString());

        if (direcset) {
            sb.append(" and md.DIRECTORNAME = '" + directorSearchCB.getSelectedItem().toString() + "'\n");
        }

        if (selectedTags.size() != 0) {

        }

        if (tagValueComboBox.getItemCount() != 0) {
            System.out.println(sTags.size());
            if (!tagWeightComboBox.getSelectedItem().toString().equals("=,<,>,>=,<=")) {
                sb.append(" and mt.TAGWEIGHT " + tagWeightComboBox.getSelectedItem().toString() + " " + tagValueComboBox.getSelectedItem().toString());
            }
        }

        if (sTags.size() != 0) {
            sb.append("and ");
            sb.append("mt.TAGID in (");
            StringBuilder tempTags = new StringBuilder();
            for (int i = 0; i < sTags.size(); i++) {
                tempTags.append("'" + Integer.parseInt(sTags.get(i).replaceAll("[\\D]", "")) + "',");
            }
            tempTags.setCharAt(tempTags.length() - 1, ' ');
            tempTags.append(")");
            sb.append(tempTags.toString());
        }
        queryResult.append("\n");
        queryResult.append("-----------------------------------------------------------\n");
        queryResult.append(sb.toString());
        return sb.toString();
    }

    private boolean castset(JComboBox<String> jb) {
        return jb.getItemCount() != 0 && !jb.getSelectedItem().toString().equals("Choose Actor/Actress");
    }

    private boolean directorset(JComboBox<String> jb) {
        return jb.getItemCount() != 0 && !jb.getSelectedItem().toString().equals("Choose Director");
    }

    private void performUserQuery() {
        uModel = new DefaultTableModel();
        uModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#",
                        "User ID"
                }
        );
        userResultTable.setModel(uModel);
        StringBuilder uquery = new StringBuilder();
        if (queryResultTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please select rows from Movie Results first");
        } else {
            selectedRowsFromMovieResult = queryResultTable.getSelectedRows();
            uquery.append("select  distinct utm.USERID from USER_TAGGEDMOVIES utm \n");
            uquery.append("where utm.MOVIEID in (");
            for (int i1 : selectedRowsFromMovieResult) {
                uquery.append("'" + selectedMoviesFromQuery.get(i1).toString() + "',");
            }
            uquery.setCharAt(uquery.length() - 1, ' ');
            uquery.append(")");
            System.out.println(uquery);
            ResultSet uresult;
            queryResult.append("\n-----------------------------------------------------------\n");
            queryResult.append(uquery.toString());

            uresult = executeQuery(uquery.toString());
            int numRow = 1;
            try {
                while (uresult.next()) {
                    Object[] objects = new Object[2];
                    objects[0] = numRow;
                    objects[1] = uresult.getObject(1);
                    uModel.addRow(objects);
                    numRow++;
                }
                if (numRow == 1) {
                    JOptionPane.showMessageDialog(null, "No user has tagged this movie");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void performMovieQuery() {

        ResultSet result;
        ResultSetMetaData metaresult;
        String query;
        int numofCol = 0;
        int numofRow = 1;

        tModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#", "MovieID", "Title", "Genre", "year", "Country",
                        "Director Name"
                }
        );
        queryResultTable.setModel(tModel);
        try {
            query = createCollectiveQuery();
            System.out.println(query);
            if (!query.equals(" ")) {
                result = executeQuery(query);
                metaresult = result.getMetaData();
                numofCol = metaresult.getColumnCount();
                System.out.println("Fetching data from DB server ....");
                while (result.next()) {
                    Object[] objects = new Object[numofCol + 1];
//                    objects[0] = Boolean.FALSE;
                    objects[0] = numofRow;
                    for (int i = 1; i <= numofCol; i++) {
                        if (i == 1)
                            selectedMoviesFromQuery.put(numofRow - 1, Integer.valueOf(result.getObject(1).toString()));
                        objects[i] = result.getObject(i);
                    }
                    numofRow++;
                    tModel.addRow(objects);
                }
                if (numofRow == 1) {
                    JOptionPane.showMessageDialog(null, "No data found in DB based on the query conditions");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }

    }

    private void performLoadButton() {
        String queryForStartYear = "select * from (select mov.YEAR from MOVIES mov order by mov.YEAR asc) where ROWNUM <=1";
        String queryForEndYear = "select * from (select mov.YEAR from MOVIES mov order by mov.YEAR desc) where ROWNUM <=1";
        ResultSet qfsy;
        ResultSet qfey;

        try {
            qfsy = executeQuery(queryForStartYear);
            qfey = executeQuery(queryForEndYear);
            while (qfsy.next()) {
                actualStartYear = qfsy.getString(1);
            }
            while (qfey.next()) {
                actualEndYear = qfey.getString(1);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }


        ResultSet result;
        // clean ui information
        removeGenrePanel();
        removeCountryPanel();
        removeTagPanel();
        removeAllText();
        tagWeightComboBox.setSelectedIndex(0);
        selectAndOrComboBox.setSelectedIndex(0);

        System.out.println("Start to load all Genres data");
        try {
            String query = "SELECT DISTINCT genre\n" + "FROM movie_genres\n" + "ORDER BY genre";
            result = executeQuery(query);
            updateGenresPanel(result);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }


    private hw3() {
        final boolean[] clicked = {false, false, false, false, false};
        conn = null;
        selectedGenres = new ArrayList<>();
        selectedCountries = new ArrayList<>();
        selectedTags = new ArrayList<>();
        searchCondition = "OR";
        queryCondition = "AND";
        tModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#", "Title", "Genre", "year", "Country",
                        "Director Name"
                }
        );
        queryResultTable.setModel(tModel);
        uModel = new DefaultTableModel();
        uModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#",
                        "User ID"
                }
        );
        userResultTable.setModel(uModel);
        performLoadButton();

        executeMovieQueryButton.addActionListener(e -> performMovieQuery());
        clearWindowsButton.addActionListener(e -> {
            //clearing result fields
            tModel = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                            "#", "Title", "Genre", "year", "Country",
                            "Director Name"
                    }
            );
            queryResultTable.setModel(tModel);
            uModel = new DefaultTableModel();
            uModel = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                            "#",
                            "User ID"
                    }
            );
            userResultTable.setModel(uModel);
            //removing button colors
            castSearchButton1.setBackground(Color.white);
            castSearchButton2.setBackground(Color.white);
            castSearchButton3.setBackground(Color.white);
            castSearchButton4.setBackground(Color.white);
            directorSearchButton.setBackground(Color.white);


//                removeGenrePanel();
            fromDatePicker.getModel().setYear(Integer.valueOf(actualStartYear));
            fromDatePicker.getModel().setMonth(0);
            fromDatePicker.getModel().setDay(1);
            toDatePicker.getModel().setYear(Integer.valueOf(actualEndYear));
            toDatePicker.getModel().setMonth(0);
            toDatePicker.getModel().setDay(1);
            tagValueComboBox.removeAllItems();
            removeCountryPanel();
            removeTagPanel();
            removeAllText();
            removeComboBox();
            //resetting cast field
            castSearchCB1.addItem("Choose Actor/Actress");
            castSearchCB2.addItem("Choose Actor/Actress");
            castSearchCB3.addItem("Choose Actor/Actress");
            castSearchCB4.addItem("Choose Actor/Actress");
            directorSearchCB.addItem("Choose Director");
            tagWeightComboBox.setSelectedIndex(0);
            selectAndOrComboBox.setSelectedIndex(0);
        });

        selectAndOrComboBox.addActionListener(e -> {
            if (selectAndOrComboBox.getSelectedItem() == "AND" || selectAndOrComboBox.getSelectedItem() == "OR") {
                searchCondition = selectAndOrComboBox.getSelectedItem().toString();
                loadCountry();
            }
        });

        fromDatePicker.addActionListener(e -> {
            selectedMovieFrom = fromDatePicker.getModel().getYear();
            System.out.println(selectedMovieFrom);
            loadCountry();

        });
        toDatePicker.addActionListener(e -> {
            selectedMovieTo = toDatePicker.getModel().getYear();
            System.out.println(selectedMovieTo);
            loadCountry();
        });
        castSearchButton1.addActionListener(e -> {
            //to toggle button colors

            if (!(castSearchCB1.getItemCount() < 1) && !clicked[0]) {
                selectedCast1 = Objects.requireNonNull(castSearchCB1.getSelectedItem()).toString();
                castSearchButton1.setBackground(Color.green);
                System.out.println(selectedCast1);
                clicked[0] = true;
            } else {
                castSearchButton1.setBackground(Color.white);
                selectedCast1 = "Choose Actor/Actress";
                castSearchCB1.setSelectedIndex(0);
                clicked[0] = false;
            }
        });
        castSearchButton2.addActionListener(e -> {
            if (!(castSearchCB2.getItemCount() < 1) && !clicked[1]) {
                selectedCast2 = Objects.requireNonNull(castSearchCB2.getSelectedItem()).toString();
                System.out.println(selectedCast2);
                castSearchButton2.setBackground(Color.green);
                clicked[1] = true;
            } else {
                castSearchButton2.setBackground(Color.white);
                selectedCast2 = "Choose Actor/Actress";
                castSearchCB2.setSelectedIndex(0);
                clicked[1] = false;
            }

        });
        castSearchButton3.addActionListener(e -> {
            if (!(castSearchCB3.getItemCount() < 1) && !clicked[2]) {
                selectedCast3 = Objects.requireNonNull(castSearchCB3.getSelectedItem()).toString();
                System.out.println(selectedCast3);
                castSearchButton3.setBackground(Color.green);
                clicked[2] = true;
            } else {
                castSearchButton3.setBackground(Color.white);
                selectedCast3 = "Choose Actor/Actress";
                castSearchCB3.setSelectedIndex(0);
                clicked[2] = false;
            }
        });
        castSearchButton4.addActionListener(e -> {
            if (!(castSearchCB4.getItemCount() < 1) && !clicked[3]) {
                selectedCast4 = Objects.requireNonNull(castSearchCB4.getSelectedItem()).toString();
                System.out.println(selectedCast4);
                castSearchButton4.setBackground(Color.green);
                clicked[3] = true;
            } else {
                castSearchButton4.setBackground(Color.white);
                selectedCast4 = "Choose Actor/Actress";
                castSearchCB4.setSelectedIndex(0);
                clicked[3] = false;
            }
        });
        directorSearchButton.addActionListener(e -> {
            if (!(directorSearchCB.getItemCount() < 1) && !clicked[4]) {
                selecteddirector = Objects.requireNonNull(directorSearchCB.getSelectedItem()).toString();
                System.out.println(selecteddirector);
                directorSearchButton.setBackground(Color.green);
                clicked[4] = true;
            } else {
                directorSearchButton.setBackground(Color.white);
                selecteddirector = "Choose Actor/Actress";
                directorSearchCB.setSelectedIndex(0);
                clicked[4] = false;
            }
        });
        executeUserQueryButton.addActionListener(e -> {
            performUserQuery();
                }
        );
    }

    private void startQueryEngine() {
        // initialize UI framework

        JFrame frame = new JFrame("Movie Query Engine");
        frame.setContentPane(new hw3().MainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }


    public static void main(String[] args) {
//        System.out.println("Hello");
        hw3 startPoint = new hw3();
        startPoint.startQueryEngine();
    }


}
